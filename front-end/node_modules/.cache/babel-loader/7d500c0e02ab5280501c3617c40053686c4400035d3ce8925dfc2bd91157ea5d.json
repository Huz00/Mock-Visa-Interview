{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabal\\\\OneDrive\\\\Documents\\\\Visa Mock\\\\Mock-Visa-Interview\\\\front-end\\\\src\\\\EmailInputPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // Import useNavigate\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InterviewPage() {\n  _s();\n  const [userResponse, setUserResponse] = useState('');\n  const [feedback, setFeedback] = useState('');\n  const location = useLocation(); // Access the name passed from NameInputPage\n  const navigate = useNavigate(); // Initialize navigate for redirection\n\n  const handleSubmitResponse = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/interview', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          response: userResponse,\n          name: location.state.name // Pass the name and response to the backend\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to submit response');\n      }\n      const data = await response.json(); // Parse JSON response\n      setFeedback(data.feedback); // Set feedback received from the backend\n\n      // Navigate to the email input page with the feedback or score\n      navigate('/email-input', {\n        state: {\n          score: data.score\n        }\n      }); // Pass score if you have it\n    } catch (error) {\n      console.error('Error submitting response:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '20%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Welcome, \", location.state.name, \". Let's start your interview!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: userResponse,\n      onChange: e => setUserResponse(e.target.value),\n      placeholder: \"Type your response here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmitResponse,\n      children: \"Submit Response\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), feedback && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Feedback: \", feedback]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(InterviewPage, \"vJ73qrWRSDxKLIrv+A++3IHnbZE=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = InterviewPage;\nexport default InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["React","useState","useLocation","useNavigate","jsxDEV","_jsxDEV","InterviewPage","_s","userResponse","setUserResponse","feedback","setFeedback","location","navigate","handleSubmitResponse","response","fetch","method","headers","body","JSON","stringify","name","state","ok","Error","data","json","score","error","console","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/gabal/OneDrive/Documents/Visa Mock/Mock-Visa-Interview/front-end/src/EmailInputPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';  // Import useNavigate\r\n\r\nfunction InterviewPage() {\r\n  const [userResponse, setUserResponse] = useState('');\r\n  const [feedback, setFeedback] = useState('');\r\n  const location = useLocation();  // Access the name passed from NameInputPage\r\n  const navigate = useNavigate();  // Initialize navigate for redirection\r\n\r\n  const handleSubmitResponse = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/interview', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          response: userResponse,\r\n          name: location.state.name  // Pass the name and response to the backend\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to submit response');\r\n      }\r\n\r\n      const data = await response.json();  // Parse JSON response\r\n      setFeedback(data.feedback);  // Set feedback received from the backend\r\n\r\n      // Navigate to the email input page with the feedback or score\r\n      navigate('/email-input', { state: { score: data.score } });  // Pass score if you have it\r\n    } catch (error) {\r\n      console.error('Error submitting response:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', marginTop: '20%' }}>\r\n      <h2>Welcome, {location.state.name}. Let's start your interview!</h2>\r\n\r\n      <textarea \r\n        value={userResponse}\r\n        onChange={(e) => setUserResponse(e.target.value)}\r\n        placeholder=\"Type your response here\"\r\n      />\r\n      <button onClick={handleSubmitResponse}>Submit Response</button>\r\n\r\n      {feedback && <p>Feedback: {feedback}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InterviewPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9D,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC,CAAC,CAAE;EACjC,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC,CAAC,CAAE;;EAEjC,MAAMW,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBN,QAAQ,EAAEP,YAAY;UACtBc,IAAI,EAAEV,QAAQ,CAACW,KAAK,CAACD,IAAI,CAAE;QAC7B,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC,CAAC,CAAE;MACrChB,WAAW,CAACe,IAAI,CAAChB,QAAQ,CAAC,CAAC,CAAE;;MAE7B;MACAG,QAAQ,CAAC,cAAc,EAAE;QAAEU,KAAK,EAAE;UAAEK,KAAK,EAAEF,IAAI,CAACE;QAAM;MAAE,CAAC,CAAC,CAAC,CAAE;IAC/D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAED,oBACExB,OAAA;IAAK0B,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAM,CAAE;IAAAC,QAAA,gBACpD7B,OAAA;MAAA6B,QAAA,GAAI,WAAS,EAACtB,QAAQ,CAACW,KAAK,CAACD,IAAI,EAAC,+BAA6B;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEpEjC,OAAA;MACEkC,KAAK,EAAE/B,YAAa;MACpBgC,QAAQ,EAAGC,CAAC,IAAKhC,eAAe,CAACgC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MACjDI,WAAW,EAAC;IAAyB;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACFjC,OAAA;MAAQuC,OAAO,EAAE9B,oBAAqB;MAAAoB,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAE9D5B,QAAQ,iBAAIL,OAAA;MAAA6B,QAAA,GAAG,YAAU,EAACxB,QAAQ;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV;AAAC/B,EAAA,CA/CQD,aAAa;EAAA,QAGHJ,WAAW,EACXC,WAAW;AAAA;AAAA0C,EAAA,GAJrBvC,aAAa;AAiDtB,eAAeA,aAAa;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}